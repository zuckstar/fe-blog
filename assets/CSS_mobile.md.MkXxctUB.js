import{_ as i,c as s,o as a,a2 as l}from"./chunks/framework.DH221WtE.js";const g=JSON.parse('{"title":"移动端适配","description":"","frontmatter":{},"headers":[],"relativePath":"CSS/mobile.md","filePath":"CSS/mobile.md"}'),p={name:"CSS/mobile.md"},n=l(`<h1 id="移动端适配" tabindex="-1">移动端适配 <a class="header-anchor" href="#移动端适配" aria-label="Permalink to &quot;移动端适配&quot;">​</a></h1><h2 id="如何做移动端的样式适配" tabindex="-1">如何做移动端的样式适配？ <a class="header-anchor" href="#如何做移动端的样式适配" aria-label="Permalink to &quot;如何做移动端的样式适配？&quot;">​</a></h2><ol><li>响应式设计</li></ol><ul><li><p>使用 CSS 媒体查询来根据设备的特征（如屏幕宽度、高度、方向）应用不同的样式</p></li><li><p>通过设置百分比宽度、最大宽度或者相对单位（比如 rem）来确保元素相当于其容器的大小进行适应</p></li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> only</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">768</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 小屏的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> only</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">769</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 中屏的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> only</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1025</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 大屏的样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>弹性布局和网格布局</li></ol><ul><li>利用弹性布局（flex）和网格布局（grid）更灵活地创建布局，使页面元素能够根据屏幕大小宽度自动调整位置</li></ul><ol start="3"><li>移动端优先</li></ol><ul><li>先定义移动端的样式，再使用媒体查询添加大屏上的样式</li></ul><ol start="4"><li>图片和多媒体适配</li></ol><ul><li>使用 max-width： 100% 保证图片和多媒体在小屏上不会溢出容器</li></ul><ol start="5"><li>交互友好</li></ol><ul><li>使用合适的尺寸和间隔，确保链接、按钮等可点击元素在触摸屏上更容易点击</li></ul><ol start="6"><li>使用浏览器开发者工具检查元素并模拟不同设备的情况</li></ol><h2 id="rem-单位" tabindex="-1">rem 单位 <a class="header-anchor" href="#rem-单位" aria-label="Permalink to &quot;rem 单位&quot;">​</a></h2><p>rem 是相对单位，是相对于 HTML 根元素的字体大小来说的，例如根元素字体大小 font-size = 12px, 则 1rem = 12px</p><h2 id="怎么让-chrome-支持小于-12px-的文字" tabindex="-1">怎么让 Chrome 支持小于 12px 的文字 <a class="header-anchor" href="#怎么让-chrome-支持小于-12px-的文字" aria-label="Permalink to &quot;怎么让 Chrome 支持小于 12px 的文字&quot;">​</a></h2><p>默认情况下，浏览器最小的字体大小限制是 12px。因此无法设置小于 12px 的文字大小。</p><ol><li>使用缩放比例：transform: scale;</li></ol><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>使用 zoom： 将容器或文本元素的 zoom 属性设置为小于 1 的值，例如 zoom：0.8；</li></ol><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  zoom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li><p>通过 <code>-webkit-text-siz-adjust: none;</code> 可以禁用 Chrome 浏览器的最小字体的限制。</p></li><li><p>使用图片替代</p></li></ol><h2 id="什么是硬件加速" tabindex="-1">什么是硬件加速？ <a class="header-anchor" href="#什么是硬件加速" aria-label="Permalink to &quot;什么是硬件加速？&quot;">​</a></h2><p>硬件加速就是将浏览器的渲染过程交给 GPU 处理，而不是使用自带的比较慢的渲染器。这样就可以使得 <code>animation</code> 与 <code>transition</code> 更加顺畅。</p><p>我们可以在浏览器中使用 css 开启硬件加速，使用 GPU 发挥功能，从而提升性能。</p><p>现在大多数电脑的显卡都支持硬件加速。鉴于此，我们可以发挥 GPU 力量，从而使我们的网站或应用表现的更为流畅。</p><h2 id="硬件加速的原理是什么" tabindex="-1">硬件加速的原理是什么？ <a class="header-anchor" href="#硬件加速的原理是什么" aria-label="Permalink to &quot;硬件加速的原理是什么？&quot;">​</a></h2><p>首先简单了解下浏览器的渲染过程：</p><ul><li><p>渲染进程将 HTML 内容转换为能够读懂的 DOM 树结构</p></li><li><p>渲染引擎将 CSS 样式表转化为浏览器可以理解的 styleSheets, 计算出 DOM 节点的样式。</p></li><li><p>创建布局树，计算元素的布局信息</p></li><li><p>对布局树进行分层，生成分层树</p></li><li><p>为每个图层生成绘制列表，并将其提交到合成线程</p></li><li><p>合成线程将图层分成图块，并将光栅化线程池中将图块转换成位图</p></li><li><p>合成线程发送绘制图块命令 DrawQuad 给浏览器进程</p></li><li><p>浏览器进程根据 DrawQuad 消息生成页面，并显示到显示器上</p></li></ul><p>普通图层和复合图层：</p><ul><li><p>渲染图层：又称默认复合层，是页面普通的文档流。我们虽然可以通过绝对定位，相对定位，浮动定位脱离文档流，但它仍然属于默认符合层，共用一个绘图上下文对象（GraphicsContext）。</p></li><li><p>复合图层：它会单独分配资源（会脱离普通文档流，这样一来，不管这个复合图层中怎么变化，也不会影响默认复合层里的回流重绘。</p></li></ul><p>某些特殊的渲染层会被提升为复合层，复合图层拥有单独的 GraphicsLayer，而其他不是复合图层的渲染层，则和其第一个拥有 GraphicsLayer 父层共用一个。</p><p>硬件加速：</p><p>直观上说就是依赖 GPU 实现图形绘制加速，软硬件加速的区别主要是图形的绘制究竟是 GPU 来处理还是 CPU，如果是 GPU，就认为是硬件加速绘制，反之，则为软件绘制。</p><p>一般一个元素开启硬件加速后就会变成复合图层，可以独立于普通文档流中，改动后可以避免整个页面重绘，提升性能。</p><p>常用的硬件加速方式有：</p><ul><li><p>最常用的方式：translate3d, translateZ</p></li><li><p>opacity 属性的过度动画</p></li><li><p>will-change 属性</p></li><li><p>video、iframe、canvas、webgl 等元素</p></li></ul><p>硬件加速的弊端：</p><ul><li><p>内存消耗和内存不足</p></li><li><p>GPU 渲染影响字体的抗锯齿效果</p></li></ul><p>注意点：使用硬件加速的时候，尽可能的使用 z-index， 防止浏览器默认给后续的元素创建复合层渲染。</p><p>简单理解就是隐式合成的概念：如果 a 是一个复合图层，而且 b 在 a 上面，那么 b 也会被隐式转成一个复合图层。</p><h2 id="如何使用-css-来实现禁止移动端页面左右滑动的手势" tabindex="-1">如何使用 css 来实现禁止移动端页面左右滑动的手势？ <a class="header-anchor" href="#如何使用-css-来实现禁止移动端页面左右滑动的手势" aria-label="Permalink to &quot;如何使用 css 来实现禁止移动端页面左右滑动的手势？&quot;">​</a></h2><p>css 属性 touch-action 用于设置触摸屏用户如何操纵元素的区域</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  touch-action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  touch-action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pan-y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="什么是响应式设计-响应式设计的基本原理是什么-如何进行实现" tabindex="-1">什么是响应式设计？响应式设计的基本原理是什么？如何进行实现？ <a class="header-anchor" href="#什么是响应式设计-响应式设计的基本原理是什么-如何进行实现" aria-label="Permalink to &quot;什么是响应式设计？响应式设计的基本原理是什么？如何进行实现？&quot;">​</a></h2><p>响应式设计的基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理，为了处理移动端，页面头部必须要有 meta 声明 viewport</p><ul><li><p>meta：设置 viewport 不可被缩放</p><ul><li>name=viewport</li><li>content <ul><li>width=device-width, height=device-height</li><li>initial-scale=1</li><li>maximum-scale=1</li><li>user-scalable=no</li></ul></li></ul></li><li><p>css3 媒体查询</p></li><li><p>rem 单位</p></li><li><p>orientationchange 手机旋转事件</p></li><li><p>resize 手机窗口大小变化</p></li></ul>`,48),t=[n];function h(e,k,r,d,o,c){return a(),s("div",null,t)}const y=i(p,[["render",h]]);export{g as __pageData,y as default};
