import{_ as a,c as e,o as t,a4 as p}from"./chunks/framework.BENtzm8J.js";const o="/fe-blog/assets/image-3._lWaFwMq.png",l="/fe-blog/assets/image-4.CfM4PnuV.png",n="/fe-blog/assets/image-1.dMRt8C97.png",r="/fe-blog/assets/image-5.zp-74Ts1.png",i="/fe-blog/assets/image-6.DEYrQWXv.png",s="/fe-blog/assets/image-7.BzByitE2.png",c="/fe-blog/assets/image-8.CZwEhVQ2.png",d="/fe-blog/assets/image-2.DKZrW02P.png",f=JSON.parse('{"title":"CDN","description":"","frontmatter":{},"headers":[],"relativePath":"Network/cdn.md","filePath":"Network/cdn.md"}'),h={name:"Network/cdn.md"},N=p('<h1 id="cdn" tabindex="-1">CDN <a class="header-anchor" href="#cdn" aria-label="Permalink to &quot;CDN&quot;">​</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><p>CDN (全称 Content Delivery Network)，即内容分发网络</p><p>构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术</p><p>简单来讲，CDN 就是根据用户位置分配最近的资源</p><p>于是，用户在上网的时候不用直接访问源站，而是访问离他“最近的”一个 CDN 节点，术语叫边缘节点，其实就是缓存了源站内容的代理服务器。</p><p><strong>访问 CDN 资源全流程图</strong></p><p><img src="'+o+'" alt="alt text"></p><h2 id="cdn-查询流程" tabindex="-1">CDN 查询流程 <a class="header-anchor" href="#cdn-查询流程" aria-label="Permalink to &quot;CDN 查询流程&quot;">​</a></h2><p>第一阶段：</p><ol><li><p>通过 DNS 服务获取 IP</p><ul><li><p>dns 服务，先查看浏览器缓存、查看操作系统 hosts 缓存</p></li><li><p>如果没有缓存，就去查询根域名、一级域名、二级域名，三级域名服务器以此类推</p></li></ul></li><li><p>最近的 DNS 服务器会提供 cdn.ali.top 域名的别名（CNAME 记录），例如 cdn.ali.top.kunlunaq.com</p></li><li><p>cdn.ali.top.kunlunaq.com 就是阿里 CDN 专用的 DNS 调度系统</p></li><li><p>DNS 调度系统会根据你的 IP 地址返回一个离你最近的 IP 地址</p></li></ol><p>第二阶段：</p><ol><li>浏览器拿到 IP 去访问响应的 CDN 节点，CDN 节点返回数据</li></ol><p>专业名词解析：</p><p><img src="'+l+'" alt="alt text"></p><h2 id="原理分析" tabindex="-1">原理分析 <a class="header-anchor" href="#原理分析" aria-label="Permalink to &quot;原理分析&quot;">​</a></h2><p>在没有应用 CDN 时，我们使用域名访问某一个站点时的路径为</p><blockquote><p>用户提交域名 → 浏览器对域名进行解释 → DNS 解析得到目的主机的 IP 地址 → 根据 IP 地址访问发出请求 → 得到请求数据并回复</p></blockquote><p>应用 CDN 后，DNS 返回的不再是 IP 地址，而是一个 CNAME(Canonical Name ) 别名记录，指向 CDN 的全局负载均衡</p><p>CNAME 实际上在域名解析的过程中承担了中间人（或者说代理）的角色，这是 CDN 实现的关键</p><h3 id="负载均衡系统" tabindex="-1">负载均衡系统 <a class="header-anchor" href="#负载均衡系统" aria-label="Permalink to &quot;负载均衡系统&quot;">​</a></h3><p>由于没有返回 IP 地址，于是本地 DNS 会向负载均衡系统再发送请求 ，则进入到 CDN 的全局负载均衡系统进行智能调度：</p><p>看用户的 IP 地址，查表得知地理位置，找相对最近的边缘节点</p><p>看用户所在的运营商网络，找相同网络的边缘节点</p><p>检查边缘节点的负载情况，找负载较轻的节点</p><p>其他，比如节点的“健康状况”、服务能力、带宽、响应时间等</p><p>结合上面的因素，得到最合适的边缘节点，然后把这个节点返回给用户，用户就能够就近访问 CDN 的缓存代理</p><p>整体流程如下图：</p><p><img src="'+n+'" alt="alt text"></p><h2 id="为什么需要-cname" tabindex="-1">为什么需要 CNAME <a class="header-anchor" href="#为什么需要-cname" aria-label="Permalink to &quot;为什么需要 CNAME&quot;">​</a></h2><p>CNAME 指向的是 CDN 专用的 DNS 域名服务器，对于整个 DNS 系统来说，它和其他域名服务器一样，平平无奇。DNS 请求也会正常打入这个服务。</p><p>但当请求真正打到它上面的时候，它的特别之处就体现出来了，当查询请求打入域名服务器时，普通的 DNS 域名服务器返回域名对应的部分 IP 就够了，但 CDN 专用的 DNS 域名服务器却会要求返回离调用方&quot;最近的&quot;服务器 IP。</p><h2 id="怎么知道哪个服务器-ip-里调用方-最近" tabindex="-1">怎么知道哪个服务器 IP 里调用方”最近“？ <a class="header-anchor" href="#怎么知道哪个服务器-ip-里调用方-最近" aria-label="Permalink to &quot;怎么知道哪个服务器 IP 里调用方”最近“？&quot;">​</a></h2><p>可以看到&quot;最近&quot;这个词其实是加了双引号的。</p><p>CDN 专用的 DNS 域名服务器其实是 CDN 提供商提供的，比如阿里云当然知道自己的的 CDN 节点有哪些，以及这些 CDN 服务器目前的负载情况和响应延时甚至权重啥的，并且也能知道调用方的 IP 地址是什么，可以通过调用方的 IP 知道它所属的运营商以及大概所在地，根据条件筛选出最合适的 CDN 服务器，这就是所谓的&quot;最近&quot;。</p><p>举个例子。假设地理位置最近的 CDN 机房流量较多，响应较慢，但地理位置远一些的服务器却能更好的响应当前请求，那按理说可能会选择地理位置远一些的那台 CDN 服务器。</p><p>也就是说，选出来的服务器不一定在地理位置最近，但一定是当前最合适的服务器。</p><h2 id="什么是-cdn-回源" tabindex="-1">什么是 CDN 回源 <a class="header-anchor" href="#什么是-cdn-回源" aria-label="Permalink to &quot;什么是 CDN 回源&quot;">​</a></h2><p>OSS 对象存储才是数据源，当第一次访问 cdn 获取某张图片时，大概率在 cdn 里并没有这张图片的数据，因此需要回到数据源那去取出这份图片数据。然后再放到 cdn 上。下次再次访问 cdn 时，只要缓存不过期，就能命中缓存直接返回，这就不需要再回源。</p><p><img src="'+r+'" alt="alt text"></p><p>除了上面提到的 cdn 上拿不到数据会回源站外，还有 cdn 上的缓存过期失效了也会导致回源站。</p><p><img src="'+i+'" alt="alt text"></p><h2 id="如何判断是否回源" tabindex="-1">如何判断是否回源 <a class="header-anchor" href="#如何判断是否回源" aria-label="Permalink to &quot;如何判断是否回源&quot;">​</a></h2><p>通过 GET 方法去请求图片数据。</p><p>然后通过下面的 tab 切换查看 response header 信息。</p><p>查看 response header：</p><p><img src="'+s+'" alt="alt text"></p><p>回源的情况 此时查看 response header 下的 X-Cache 的值是 MISS TCP_MISS。意思是未命中缓存导致 CDN 回源查 oss，拿到数据后再返回。</p><p>那此时 CDN 里肯定是有这张图片的缓存了。我们可以试着再执行一次 GET 方法获取图片。</p><p><img src="'+c+'" alt="alt text"></p><h2 id="用了-cdn-一定比不用的更快吗" tabindex="-1">用了 CDN 一定比不用的更快吗？ <a class="header-anchor" href="#用了-cdn-一定比不用的更快吗" aria-label="Permalink to &quot;用了 CDN 一定比不用的更快吗？&quot;">​</a></h2><p>不一定。更新走了 CDN 还回源。相当于在原来的流程上还多了一层 CDN 的调用流程。</p><p>也就是，用了 CDN 时，未命中 CDN 缓存导致回源，就会比不用的时候更慢。</p><p>未命中缓存，可能是 cdn 里压根就没这一数据，也可能是曾经有这条数据但后来过期失效了。</p><p>这两种情况都正常，大部分时候并不需要做任何处理。</p><p>但对于极个别场景，我们可能需要做些优化。比如你们源站数据有大版本更新，就像更换 cdn 域名啥的，那在上线的那一刻用户全用新 cdn 域名去请求图片啥的，新 CDN 节点基本上百分百触发回源，严重的时候甚至可能会拖垮对象存储。这时候你可能需要提前将热点数据筛选出来，利用工具预先请求一波，让 CDN 加载上热数据缓存。比如某里云上的 CDN 就有这样的&quot;刷新预热&quot;功能。</p><h2 id="什么情况下不该用-cdn" tabindex="-1">什么情况下不该用 CDN？ <a class="header-anchor" href="#什么情况下不该用-cdn" aria-label="Permalink to &quot;什么情况下不该用 CDN？&quot;">​</a></h2><ul><li><p>资源不太可能被多次重复调用</p></li><li><p>内网服务</p></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>• 对于文本类数据我们习惯用 mysql 做存储，redis 做缓存。但属于文件类数据，比如视频图片，则需要使用 oss 等做对象存储，cdn 做缓存。</p><p>• 用了 CDN 如果发生回源，那实际上会比不用的时候更慢一些。</p><p>• CDN 最大的优势在于，对于来自世界各地的用户，它可以就近分配 CDN 节点获取数据，并且多次重复获取同一个文件数据的时候，有缓存加速的作用。如果你的服务和对象存储都在内网，并且文件数据也不太会有重复使用的可能性，那其实没必要接入 cdn。</p><h2 id="面试题-cdn-是如何解析到离用户最近的边缘节点" tabindex="-1">面试题：CDN 是如何解析到离用户最近的边缘节点？ <a class="header-anchor" href="#面试题-cdn-是如何解析到离用户最近的边缘节点" aria-label="Permalink to &quot;面试题：CDN 是如何解析到离用户最近的边缘节点？&quot;">​</a></h2><p><strong>根据用户的 IP 地址</strong>，DNS 服务器返回与其距离最近的可用节点的 IP 地址。这种方式通常基于地理位置和网络测量来选择最佳节点，从而确保用户连接到最近的边缘节点。</p><ul><li><p>利用 CNAME 的能力，把对 www.test.com 域名的解析变成对特定 CDN 域名的解析，如下图中的 <code>www.test.com.cdn.dnsv1.com</code></p></li><li><p>CDN 服务商维护着一个巨大而精确的 IP 地址数据库，能够根据用户客户端的 IP 判断出客户端所在地、网络运营商等信息</p></li><li><p>当解析 <code>www.test.com.cdn.dnsv1.com</code> 域名 IP 时，会向 CDN 服务的 DNS 域名发起请求，此时 CDN 服务的 DNS 域名可以根据用户客户端 IP 返回一个离它最近的缓存服务器 IP</p></li></ul><p><img src="'+d+'" alt="alt text"></p><h3 id="分析-dns-查询过程" tabindex="-1">分析 dns 查询过程 <a class="header-anchor" href="#分析-dns-查询过程" aria-label="Permalink to &quot;分析 dns 查询过程&quot;">​</a></h3><p>可以使用 <code>dig + 域名地址</code> 的命令查看域名解析的过程</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://juejin.cn/post/7027847808442957831" target="_blank" rel="noreferrer">CDN 是如何解析到离用户最近的边缘节点？</a></p><p><a href="https://blog.csdn.net/kevin_tech/article/details/131098826" target="_blank" rel="noreferrer">六问 CDN</a></p>',71),D=[N];function C(m,u,_,b,q,P){return t(),e("div",null,D)}const k=a(h,[["render",C]]);export{f as __pageData,k as default};
