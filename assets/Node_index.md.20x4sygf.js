import{_ as s,c as i,o as a,a4 as l}from"./chunks/framework.BENtzm8J.js";const n="/fe-blog/assets/image.7fZ5cxYv.png",u=JSON.parse('{"title":"Node.js","description":"","frontmatter":{},"headers":[],"relativePath":"Node/index.md","filePath":"Node/index.md"}'),e={name:"Node/index.md"},t=l('<h1 id="node-js" tabindex="-1">Node.js <a class="header-anchor" href="#node-js" aria-label="Permalink to &quot;Node.js&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>非阻塞</li><li>事件循环</li><li>异常处理</li><li>模块系统</li><li>异步编程与流</li><li>npm</li><li>模块系统</li><li>buffer</li><li>stream</li><li>事件模式</li></ul><h2 id="非阻塞" tabindex="-1">非阻塞 <a class="header-anchor" href="#非阻塞" aria-label="Permalink to &quot;非阻塞&quot;">​</a></h2><p>事件循环：负责监听异步模块和派发任务</p><p>异步模块(多线程)： 耗时 I/O-&gt;异步操作-&gt;回调函数-&gt;事件循环-&gt;按照顺序推动到调用栈</p><p><img src="'+n+`" alt="alt text"></p><h2 id="事件循环" tabindex="-1"><a href="./../Browser/eventloop.html">事件循环</a> <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;[事件循环](../Browser/eventloop.md)&quot;">​</a></h2><h2 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h2><p>捕获并处理每一个错误。否则进程挂了。</p><p>同步代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><p>异步代码：</p><ul><li><p>promise, .catch() 方法捕获这个错误</p></li><li><p>async/await, try catch</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 处理未捕获异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uncaughtException&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 处理未捕获的 promise 异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;unhandledRejection&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span></code></pre></div><p>使用 nodemon，pm2 来管理 node 进程</p><h2 id="异步编程和流程控制" tabindex="-1">异步编程和流程控制 <a class="header-anchor" href="#异步编程和流程控制" aria-label="Permalink to &quot;异步编程和流程控制&quot;">​</a></h2><ul><li>回调函数 -&gt; promise -&gt; async/await</li></ul><h2 id="模块系统" tabindex="-1">模块系统 <a class="header-anchor" href="#模块系统" aria-label="Permalink to &quot;模块系统&quot;">​</a></h2><h3 id="commonjs-流行" tabindex="-1">commonJS （流行） <a class="header-anchor" href="#commonjs-流行" aria-label="Permalink to &quot;commonJS （流行）&quot;">​</a></h3><ol><li><p>每个文件都是一个独立模块，每个模块都有一个 module 对象用来记录模块信息</p></li><li><p>通过 <code>module.exports</code> 或者 <code>exports</code> 可以导出模块</p></li><li><p>通过 <code>require()</code> 可以导入项目</p></li></ol><h3 id="es-module-未来" tabindex="-1">ES module （未来） <a class="header-anchor" href="#es-module-未来" aria-label="Permalink to &quot;ES module （未来）&quot;">​</a></h3><p>在 package.json 中，配置 type=&quot;module&quot;</p><h3 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h3><p>核心模块：核心模块随 node 一起安装，不需要额外的安装，可以直接引用</p><p>第三方模块：需要 npm 安装的模块，安装位置是 node_modules</p><p>自定义模块：我们自己定义的模块，引用是需要写路径</p><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><ul><li><p>commonJS 运行时加载，执行的时候才加载，require 可以放在代码的任意位置</p></li><li><p>ES module 预编译时加载，可以更早地发现错误。</p><ul><li>import xx from</li><li>import 函数，异步函数，返回的是 promise 对象</li><li>有向图</li></ul></li></ul><p><a href="https://www.bilibili.com/video/BV1vB4y197xU/?spm_id_from=333.788&amp;vd_source=e3b06273d67da30202e9861b00e040a5" target="_blank" rel="noreferrer">课程</a></p><h2 id="buffer" tabindex="-1">buffer <a class="header-anchor" href="#buffer" aria-label="Permalink to &quot;buffer&quot;">​</a></h2><p>buffer 对象用来操作二进制数据，长文本、大文件、图片、音频</p><p>字符串在 JavaScript 里是不可变的，操作字符内存占用大，而对于 buffer 对象可以直接像数组一样修改数据</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建 buffer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(size, fill, (encoding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转换成字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 类数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buffer[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 72</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="stream" tabindex="-1">stream <a class="header-anchor" href="#stream" aria-label="Permalink to &quot;stream&quot;">​</a></h2><p>Stream 是 Node 核心模块。平时使用的都是对 Stream 的封装。</p><ul><li>http <ul><li>req</li><li>res</li></ul></li><li>fs(把文件转换为流对象) <ul><li>createReadStream</li><li>createWriteStream</li></ul></li><li>zlib <ul><li>流模式：一边读文件，一边解压缩，一边写入磁盘</li></ul></li><li>crypto</li></ul><p>Stream 的应用场景就是 I/O 操作，处理端到端的数据交换</p><p>缓冲模式：程序把需要处理的资源从磁盘加载到内存区域，等所有数据加载后再进行后续处理。</p><p>流模式：程序只要加载到数据就会立刻处理，加载一点，处理一点，把资源分成一小小的一块，将数据块源源不断地传给调用端</p><p>Stream：</p><ul><li><p>Readable 可读流</p><ul><li>readble 事件、resume 事件、data 事件、close 事件、end 事件、error 事件</li></ul></li><li><p>Writable 可写流</p><ul><li>close、finish、drain、error</li></ul></li><li><p>Duplex 双工流</p><ul><li><p>transform 流</p></li><li><p>passThrough 流</p></li></ul></li><li><p>流之间的交互 pipe 管道</p><ul><li>管道（Pipe）是一种将可读流和可写流连接起来的机制。通过创建一个管道，可以将数据从一个可读流传输到一个可写流，从而实现数据的传输和转换。在管道中，数据会以流式的方式通过数据管道，直到全部数据被传输完毕。</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Readable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stream&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Readable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 可读缓存区的最大字符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  highWaterMark: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  encoding: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  objectMode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 将流push到缓冲区，内部调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="事件模式" tabindex="-1">事件模式 <a class="header-anchor" href="#事件模式" aria-label="Permalink to &quot;事件模式&quot;">​</a></h2><p>EventEmitter 观察者模式</p><ul><li>on：用于注册监听器</li><li>once：注册一次性监听器</li><li>emit：触发事件，同步地调用监听器</li><li>removeListener：移除某个事件的监听器</li></ul><p>监听器实际上就是一个数组，触发事件按注册的顺序执行</p><p>支持链式调用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>`,49),h=[t];function p(k,r,d,o,E,c){return a(),i("div",null,h)}const y=s(e,[["render",p]]);export{u as __pageData,y as default};
