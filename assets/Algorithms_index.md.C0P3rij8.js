import{_ as s,c as i,o as t,a4 as a}from"./chunks/framework.BENtzm8J.js";const c=JSON.parse('{"title":"数据结构和算法","description":"","frontmatter":{},"headers":[],"relativePath":"Algorithms/index.md","filePath":"Algorithms/index.md"}'),e={name:"Algorithms/index.md"},n=a(`<h1 id="数据结构和算法" tabindex="-1">数据结构和算法 <a class="header-anchor" href="#数据结构和算法" aria-label="Permalink to &quot;数据结构和算法&quot;">​</a></h1><p>数据结构和算法关注前端高频考题。</p><p>冲击阶段：直接到 codeTop 选中你要面试的公司，按出题频率刷题 <a href="https://codetop.cc/home" target="_blank" rel="noreferrer">codeTop</a></p><p>准备阶段：按算法类型分类刷题，更易于记忆</p><p>常见前端数据结构和算法分类：</p><ul><li>数组和双指针</li><li>递归和回溯 DFS、BFS</li><li>树和图</li><li>链表</li><li>栈与队列</li><li>贪心和动态规划</li><li>字符串处理</li><li>排序和查找</li><li>字符串处理</li></ul><h2 id="数组和双指针" tabindex="-1">数组和双指针 <a class="header-anchor" href="#数组和双指针" aria-label="Permalink to &quot;数组和双指针&quot;">​</a></h2><table tabindex="0"><thead><tr><th>算法</th><th>难度</th><th>完成次数</th></tr></thead><tbody><tr><td><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/" target="_blank" rel="noreferrer">长度最小的子数组</a></td><td>中等</td><td>❌</td></tr><tr><td><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="noreferrer">无重复字符的最长子串</a></td><td>中等</td><td>✅ ✅</td></tr><tr><td><a href="https://leetcode.cn/problems/spiral-matrix/description/" target="_blank" rel="noreferrer">螺旋矩阵</a></td><td>中等</td><td>✅</td></tr><tr><td><a href="https://leetcode.cn/problems/merge-intervals/description/" target="_blank" rel="noreferrer">合并区间</a></td><td>中等</td><td>✅</td></tr><tr><td><a href="https://leetcode.cn/problems/3sum/description/" target="_blank" rel="noreferrer">三数之和</a></td><td>中等</td><td>✅</td></tr><tr><td><a href="https://leetcode.cn/problems/trapping-rain-water/" target="_blank" rel="noreferrer">接雨水</a></td><td>困难</td><td>❌</td></tr><tr><td><a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/submissions/558077360" target="_blank" rel="noreferrer">搜索二维矩阵 2</a></td><td>中等</td><td>❌</td></tr><tr><td><a href="https://leetcode.cn/problems/container-with-most-water/description/" target="_blank" rel="noreferrer">盛最多水的容器</a></td><td>中等</td><td>✅</td></tr><tr><td><a href="https://leetcode.cn/problems/majority-element/description/" target="_blank" rel="noreferrer">多数元素</a></td><td>简单</td><td>❌</td></tr></tbody></table><h2 id="递归和回溯" tabindex="-1">递归和回溯 <a class="header-anchor" href="#递归和回溯" aria-label="Permalink to &quot;递归和回溯&quot;">​</a></h2><table tabindex="0"><thead><tr><th>算法</th><th>难度</th><th>完成次数</th></tr></thead><tbody><tr><td><a href="https://leetcode.cn/problems/subsets/description" target="_blank" rel="noreferrer">子集</a></td><td>中等</td><td>❌</td></tr><tr><td><a href="https://leetcode.cn/problems/generate-parentheses/" target="_blank" rel="noreferrer">括号生成</a></td><td>中等</td><td>✅</td></tr><tr><td><a href="https://leetcode.cn/problems/n-queens/" target="_blank" rel="noreferrer">N 皇后</a></td><td>困难</td><td>❌</td></tr></tbody></table><h2 id="树和图" tabindex="-1">树和图 <a class="header-anchor" href="#树和图" aria-label="Permalink to &quot;树和图&quot;">​</a></h2><table tabindex="0"><thead><tr><th>算法</th><th>难度</th><th>完成次数</th></tr></thead><tbody><tr><td><a href="https://leetcode.cn/problems/diameter-of-binary-tree/description/" target="_blank" rel="noreferrer">二叉树的直径</a></td><td>简单</td><td>❌</td></tr><tr><td><a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/description/" target="_blank" rel="noreferrer">二叉树最大路径和</a></td><td>困难</td><td>❌❌</td></tr><tr><td><a href="https://leetcode.cn/problems/path-sum-iii/description/" target="_blank" rel="noreferrer">路径总和 3</a></td><td>中等</td><td>❌</td></tr><tr><td><a href="https://leetcode.cn/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/description/" target="_blank" rel="noreferrer">二叉树中和为目标值的路径</a></td><td>中等</td><td>✅</td></tr><tr><td><a href="https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/description/" target="_blank" rel="noreferrer">N 叉树的最大深度</a></td><td>简单</td><td>✅</td></tr></tbody></table><h2 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-label="Permalink to &quot;链表&quot;">​</a></h2><table tabindex="0"><thead><tr><th>算法</th><th>难度</th><th>完成次数</th></tr></thead><tbody><tr><td><a href="https://leetcode.cn/problems/merge-two-sorted-lists/" target="_blank" rel="noreferrer">合并两个有序链表</a></td><td>简单</td><td>✅</td></tr><tr><td><a href="https://leetcode.cn/problems/merge-k-sorted-lists/description/" target="_blank" rel="noreferrer">合并 k 个升序链表</a></td><td>困难</td><td>✅</td></tr><tr><td><a href="https://leetcode.cn/problems/lru-cache/description/" target="_blank" rel="noreferrer">LRU 缓存</a></td><td>中等</td><td>❌</td></tr><tr><td><a href="https://leetcode.cn/problems/reverse-linked-list/description/" target="_blank" rel="noreferrer">反转链表</a></td><td>简单</td><td>✅</td></tr><tr><td><a href="https://leetcode.cn/problems/reverse-nodes-in-k-group/description/" target="_blank" rel="noreferrer">K 个一组翻转链表</a></td><td>困难</td><td>✅</td></tr><tr><td><a href="https://leetcode.cn/problems/add-two-numbers/description/" target="_blank" rel="noreferrer">两数相加</a></td><td>中等</td><td></td></tr><tr><td><a href="https://leetcode.cn/problems/palindrome-linked-list/solutions/" target="_blank" rel="noreferrer">回文链表</a></td><td>简单</td><td>✅</td></tr><tr><td><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/description/" target="_blank" rel="noreferrer">相交链表</a></td><td>简单</td><td>✅</td></tr></tbody></table><h2 id="栈与队列" tabindex="-1">栈与队列 <a class="header-anchor" href="#栈与队列" aria-label="Permalink to &quot;栈与队列&quot;">​</a></h2><table tabindex="0"><thead><tr><th>算法</th><th>难度</th><th>完成次数</th></tr></thead><tbody><tr><td><a href="https://leetcode.cn/problems/simplify-path/description/" target="_blank" rel="noreferrer">简化路径</a></td><td>中等</td><td>✅</td></tr><tr><td><a href="https://leetcode.cn/problems/min-stack/description/" target="_blank" rel="noreferrer">最小栈</a></td><td>中等</td><td>✅</td></tr></tbody></table><h2 id="排序和查找" tabindex="-1">排序和查找 <a class="header-anchor" href="#排序和查找" aria-label="Permalink to &quot;排序和查找&quot;">​</a></h2><table tabindex="0"><thead><tr><th>算法</th><th>难度</th><th>完成次数</th></tr></thead><tbody><tr><td><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/description/" target="_blank" rel="noreferrer">数组中的第 K 个最大元素</a></td><td>中等</td><td></td></tr><tr><td><a href="https://leetcode.cn/problems/sort-an-array/description/" target="_blank" rel="noreferrer">手撕快速排序</a></td><td>中等</td><td>❌</td></tr><tr><td><a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/description" target="_blank" rel="noreferrer">搜索旋转排序数组</a></td><td>中等</td><td>❌</td></tr><tr><td><a href="https://leetcode.cn/problems/binary-search/" target="_blank" rel="noreferrer">二分查找</a></td><td>简单</td><td></td></tr></tbody></table><h3 id="冒泡排序" tabindex="-1">冒泡排序 <a class="header-anchor" href="#冒泡排序" aria-label="Permalink to &quot;冒泡排序&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sortArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 外层，排序的次数，需要冒泡的次数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 内层，相邻元素比较，左边大于右边则交换位置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // - i 是已经有 i 个最大元素排好序列了，无需重复遍历</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (nums[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [nums[j], nums[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [nums[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], nums[j]];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="快速排序" tabindex="-1">快速排序 <a class="header-anchor" href="#快速排序" aria-label="Permalink to &quot;快速排序&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sortArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> swap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">j</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [nums[i], nums[j]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [nums[j], nums[i]];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> quicksort</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">l</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pivot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums[l];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 不能是 &gt;= 因为可能会跳过 pivot 目标值，导致最终定位到 pivot 的 +1 位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (nums[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pivot) j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (nums[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pivot) i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        swap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, j);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    quicksort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(l, i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // i ~ r 中可能有重复值，所以 i 也要参与排序</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    quicksort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, r);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  quicksort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, nums.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="动态规划" tabindex="-1">动态规划 <a class="header-anchor" href="#动态规划" aria-label="Permalink to &quot;动态规划&quot;">​</a></h2><table tabindex="0"><thead><tr><th>算法</th><th>难度</th><th>完成次数</th></tr></thead><tbody><tr><td><a href="https://leetcode.cn/problems/maximum-subarray/description/" target="_blank" rel="noreferrer">最大子数组和</a></td><td>中等</td><td>❌</td></tr><tr><td><a href="https://leetcode.cn/problems/longest-increasing-subsequence/description/" target="_blank" rel="noreferrer">最长递增子序列</a></td><td>中等</td><td></td></tr><tr><td><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/description" target="_blank" rel="noreferrer">买卖股票的最佳时机</a></td><td>简单</td><td></td></tr></tbody></table><h2 id="字符串处理" tabindex="-1">字符串处理 <a class="header-anchor" href="#字符串处理" aria-label="Permalink to &quot;字符串处理&quot;">​</a></h2><table tabindex="0"><thead><tr><th>算法</th><th>难度</th><th>完成次数</th></tr></thead><tbody><tr><td><a href="https://leetcode.cn/problems/add-strings/description/" target="_blank" rel="noreferrer">字符串相加</a></td><td>简单</td><td>❌</td></tr><tr><td><a href="https://leetcode.cn/problems/string-to-integer-atoi/solutions/183164/zi-fu-chuan-zhuan-huan-zheng-shu-atoi-by-leetcode-/" target="_blank" rel="noreferrer">字符串转整数</a></td><td>中等</td><td></td></tr></tbody></table>`,26),h=[n];function l(r,p,k,d,E,o){return t(),i("div",null,h)}const y=s(e,[["render",l]]);export{c as __pageData,y as default};
